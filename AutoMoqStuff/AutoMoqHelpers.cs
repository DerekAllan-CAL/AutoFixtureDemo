using System.Reflection;
using AutoFixture;
using AutoFixture.AutoMoq;
using AutoFixture.Xunit2;
using Xunit.Sdk;

namespace AutoMoqStuff;

[AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
public class MemberAutoMoqDataAttribute : AutoCompositeDataAttribute
{
    public MemberAutoMoqDataAttribute(string memberName, params object[] p)
        : base(new MemberDataAttribute(memberName, p), new AutoMoqInterfacesAttribute())
    {
    }
}

[AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
public class ClassAutoMoqDataAttribute : AutoCompositeDataAttribute
{
    public ClassAutoMoqDataAttribute(Type t)
        : base(new ClassDataAttribute(t), new AutoMoqInterfacesAttribute())
    {
    }
}

[AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
public class InlineAutoMoqDataAttribute : AutoCompositeDataAttribute
{
    public InlineAutoMoqDataAttribute(params object[] arguments)
        : base(new InlineDataAttribute(arguments), new AutoMoqInterfacesAttribute())
    {
    }
}

[AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
public class AutoMoqInterfacesAttribute : AutoDataAttribute
{
    public AutoMoqInterfacesAttribute()
        :base(() => new Fixture().Customize(new AutoMoqCustomization()))
    {

    }
}

public abstract class AutoCompositeDataAttribute : DataAttribute
{
    private readonly DataAttribute _dataProviderAttribute;
    private readonly DataAttribute _autoDataAttribute;

    protected AutoCompositeDataAttribute(DataAttribute dataProviderAttribute, DataAttribute autoDataAttribute)
    {
        if (dataProviderAttribute is not (MemberDataAttribute or ClassDataAttribute or InlineDataAttribute))
        {
            throw new Exception("Expecting a data provider attribute (MemberDataAttribute or ClassDataAttribute or InlineDataAttribute)");
        }
        _dataProviderAttribute = dataProviderAttribute;
        _autoDataAttribute = autoDataAttribute;
    }

    public override IEnumerable<object[]> GetData(MethodInfo testMethod)
    {
        var testRunsData = _dataProviderAttribute.GetData(testMethod);

        // Loop through all the test runs that our dataProviderAttribute has created
        foreach (var runData in testRunsData)
        {
            var autoDataForTestRun = _autoDataAttribute.GetData(testMethod).ToArray()[0];

            // Insert the data we've overriden using the dataProvider.
            // Think what's coming from your ClassDataAttribute/MemberDataAttribute etc..
            // We're just going to override the autoGenerated data here
            for (var i = 0; i < runData.Length; i++)
            {
                autoDataForTestRun[i] = runData[i];
            }

            yield return autoDataForTestRun;
        }
    }
}
